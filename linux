## 리눅스(Linux)
### 1. 리눅스(Linux)
* 리눅스는 윈도나 맥 OS와 같은 운영체제이다.
* 운영체제는 컴퓨터와 같은 기계장치인 하드웨어와 컴퓨터에 설치되는 모든 소프트웨어를 관리하는 역할을 한다.
### 2. 리눅스의 장점
* 오픈 소스로 무료로 사용할 수 있고 운영 체제의 내부 동작을 확인할 수 있다.
* 높은 품질로 다양한 소프트웨어를 리눅스에서 실행시킬 수 있다. (웹 서버, 웹 애플리케이션, 데이터베이스 등)
* 스크립트를 통해 많은 부분을 자동화할 수 있어 운영에 편리하다.
* 서버용 운영체제로 많이 사용된다.
### 3. 리눅스의 단점
* 윈도나 맥보다 문서를 편집하거나 이미지나 영상과 같은 멀티미디어를 편집하는 소프트웨어가 부족하다. 
* 공식 문서나 도움말이 영어로만 되어있거나 소프트웨어에 따라 한글이 깨지기도 한다.
### 4. 리눅스 배포판
* 리눅스 커널과 함께 기본적인 명령어와 애플리케이션을 묶어서 사용자가 바로 사용할 수 있게 패키징 한 것이 리눅스 배포판이다.
* 리눅스 커널이란 운영 체제의 중심에서 하드웨어를 제어하는 역할을 담당하는 소프트웨어이다.
* 리눅스 배포판은 무척 다양한데 대표적으로 레드헷(Red Hat) 계열과 데비안(Debian) 계열이 있다.
### 5. 리눅스 설치
* 오라클 VM 버추얼박스 설치하기
* 우분투(Ubuntu) 이미지 파일 받기
  * ISO 파일이란 CD나 DVD 등 디스크를 파일로 만든 것이다.
  * 버추얼박스에서는 이러한 디스크 이미지 파일을 사용해서 물리적 디스크 없이 운영체제를 설치하는 것이 가능하다.
* 버추얼박스로 가상 머신 만들기
* 가상 머신에 우분투 설치하기
## 셸(Shell)
### 1. 셸(Shell)
* 리눅스는 키보드로 명령어를 입력하는 방식을 더 많이 사용하는데 이때 리눅스와 사용자를 연결하는 것이 셸이다.
* 리눅스에서는 사용자가 커널을 직접 조작할 수 없게 되어 있기 때문에 둘 사이에서 명령어를 받아들이고 커널의 실행 결과를 출력하는 소프트웨어가 필요한데 이 역할을 수행하는 소프트웨어가 셸이다.
* 즉, 셸은 커널의 인터페이스에 해당한다.
* 리눅스에서는 다양한 셸을 사용할 수 있는데 대표적으로 `sh`, `csh`, `bash`, `tsch`, `zsh`가 있다.
### 2. 터미널(Terminal)
* 터미널이란 컴퓨터의 입출력만을 담당하는 전용 하드웨어를 말한다.
* 현재 리눅스를 다룰 때 하드웨어 터미널을 사용하는 경우는 거의 없으며 소프트웨어로 구현한 터미널을 사용한다.
* 터미널과 셸은 완전히 다른 소프트웨어이니 혼동하면 안 된다.
## 파일/디렉터리
### 1. 리눅스 파일
* 리눅스에서는 모든 것을 파일로 다룬다.
* 정보(데이터), 이미지, 영상, 프로그램 등을 파일로 보존한다. 
* 리눅스에서는 시스템을 구성하는 장치조차도 파일로 다룬다. (하드 디스크, 키보드, 프린터, 커널 등)
### 2. 리눅스 디렉터리(Directory)
* 여러 개의 파일을 담아서 정리할 수 있는 것이 디렉터리이다. (윈도나 맥의 폴더와 동일)
* 디렉터리 안에 있는 디렉터리를 서브 디렉터리 혹은 자식 디렉터리라고 부른다.
* 반대로 어떤 디렉터리 위에 있는 디렉터리를 상위 디렉터리 혹은 부모 디렉터리라고 부른다.
### 3. 루트 디렉터리(Root Directory)
* 리눅스의 디렉터리 구조에서 맨 위에 있는 `/` 디렉터리를 루트 디렉터리라 한다. (모든 파일과 디렉터리의 최상위)
* 루트 디렉터리 아래에 디렉터리와 파일이 있는 계층 구조를 트리라고 한다.
* 리눅스는 언제나 시스템 전체에서 단 하나의 트리만 가지게 된다.
### 4. 작업 디렉터리(Working Directory)
* 리눅스를 사용하다 보면 많은 디렉터리를 이동하면서 작업하게 되는데 이때 현재 위치한 디렉터리를 작업 디렉터리라고 한다.
* 리눅스에 로그인한 직후에는 사용자의 홈 디렉터리에서 시작한다. (홈 디렉터리는 명령 프롬프트에서 `~`로 표시된다.)
* 현재 작업 중인 디렉터리를 확인하려면 `pwd` 명령어를 사용한다.
  ``` sh
  $ pwd
  /home/beyond
  ```
### 5. 절대 경로와 상대 경로
* 루트 디렉터리에서 해당 파일에 이르는 경로를 표시하는 것을 절대 경로라고 한다.
* 절대 경로는 해당 파일의 위치를 명확하게 나타내지만 디렉터리의 깊이가 깊으면 경로가 길어진다는 문제가 있다.
  ```
  /usr/share/zoneinfo/Asia
  ```
* 현재 디렉터리의 위치를 기준으로 표기하는 경로를 상대 경로라고 한다.
* 상대 경로를 사용할 때는 특수 디렉터리인 `.`와 `..`를 사용할 수 있다.
* `.`은 현재 디렉터리를 뜻하고 `..`는 상위(부모) 디렉터리 뜻한다.
### 6. 디렉터리 이동
* 현재 작업 디렉터리를 변경하려면 `cd` 명령어를 사용한다.
  ``` sh
  $ cd [이동할 디렉터리 이름]
  ```
* `cd` 명령어는 명령어 뒤에 지정한 디렉터리로 이동하는데 이때 명령어 뒤에 스페이스로 구분하여 전달하는 문자열을 커맨드 라인 인자라 한다.
* 디렉터리를 지정할 때 절대 경로와 상대 경로 모두 지정이 가능하다. 
  ``` sh
  $ cd /home/beyond
  $ cd ..
  ```
### 7. 디렉터리 내용 확인
* 현재 작업 디렉터리에 있는 파일이나 하위 디렉터리의 목록을 확인하려면 `ls` 명령어를 사용한다.
  ``` sh
  $ ls
  bin  boot  dev  etc  home  lib  lib32  lib64  libx32  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var
  ```
* 인자로 파일 또는 디렉터리를 지정하면 해당 경로를 출력한다. (여러 경로를 지정 가능)
  ``` sh
  $ ls [파일 또는 디렉터리 이름]
  ```
* `ls` 명령어는 `-`으로 시작하는 옵션을 지정할 수 있는데 이를 옵션 또는 커맨드 라인 옵션이라고 부른다.
  ``` sh
  # 파일의 속성과 상세 정보까지 함께 출력
  $ ls -l 

  # 숨겨진 파일도 함께 출력
  $ ls -a

  # 파일 이름 뒤에 파일을 의미하는 기호를 추가해 출력
  # / : 디렉터리, * : 실행 파일, @ : 심볼릭 링크
  $ ls -F 
  ```
## 파일/디렉터리 조작
### 1. 파일/디렉터리 만들기
* 새로운 디렉터리를 생성하려면 `mkdir` 명령어를 사용한다.
  ``` sh
  $ mkdir [옵션] <디렉터리 이름>
  ```
* `mkdir` 명령어로 중첩된 디렉터리를 만들려고 할 때 중간 경로의 디렉터리가 존재하지 않으면 에러가 발생한다.
* `-p` 옵션으로 중간 단계의 디렉터리가 없는 경우에 자동으로 생성되도록 할 수 있다.
  ``` sh
  $ mkdir -p ./dev/test
  ```
* 내용이 없는 빈 파일을 생성하려면 `touch` 명령어를 사용한다.
* `touch` 명령어를 사용할 때 파일 여러 개를 한꺼번에 생성할 수 있다.
  ``` sh
  $ touch <생성할 파일 이름> <생성할 파일 이름> ...
  ```
* `touch` 명령어는 파일의 타임스탬프를 갱신하는 명령어인데 대상이 되는 파일이 존재하지 않으면 새롭게 파일을 만든다.
### 2. 파일/디렉터리 삭제
* 파일을 삭제하려면 `rm` 명령어를 사용한다.
* `rm` 명령어를 사용할 때 파일 여러 개를 한꺼번에 삭제할 수 있다.
  ``` sh
  $ rm [옵션] <삭제할 파일 이름> <삭제할 파일 이름> ...
  ```
* `rm` 명령어를 사용해서 디렉터리도 삭제할 수 있는데 디렉터리를 삭제하는 옵션인 `-r`을 지정해야 한다.
  ``` sh
  # 디렉터리에 존재하는 파일, 디렉터리 모두 삭제됨
  $ rm -r <삭제할 디렉터리 이름>
  ```
* 빈 디렉터리를 삭제할 때는 `rmdir` 명령어를 사용한다.
  ``` sh
  $ rmdir <삭제할 디렉터리 이름> <삭제할 디렉터리 이름> ...
  ```
### 3. 파일 내용 출력
* 파일의 내용을 출력하려면 `cat` 명령어를 사용한다.
* `cat` 명령어의 인자로 여러 파일을 지정하면 순차적으로 그 내용이 출력된다.
  ``` sh
  $ cat [옵션] <파일 이름> <파일 이름> ...
  ```
* `-n` 옵션을 사용하여 내용을 출력할 때 행 번호를 출력할 수 있다.
  ``` sh
  $ cat -n <파일 이름>
  ```
* 화면 단위로 파일의 내용을 출력하려면 `less` 명령어를 사용한다.
  ``` sh
  $ less [옵션] <파일 이름>
  ```
* 아래의 단축키를 사용해서 파일의 내용을 위아래로 스크롤 하며 볼 수 있다.
  * `Space` 키는 한 화면 아래로 스크롤
  * `b` 키는 한 화면 위로 스크롤
  * `Enter` 키는 한 행 아래로 스크롤
  * `k` 키는 한 행 위로 스크롤
  * `q` 키는 `less` 명령어를 종료
* `less` 명령어로 열려있는 파일에서 문자열을 검색할 수 있다.
  * `/문자열`은 문자열을 아래 방향으로 검색
  * `?문자열`은 문자열을 위 방향으로 검색
  * `n`은 검색 결과가 여러 개라면 다음 검색 결과로 이동
  * `N`은 검색 결과가 여러 개라면 이전 검색 결과로 이동
### 4. 파일/디렉터리 복사
* 파일이나 디렉터리를 복사할 때는 `cp` 명령어를 사용한다.
* 복사할 위치에 디렉터리를 지정하면 해당 디렉터리 안에 복사된다.
* 디렉터리 안에 파일을 복사할 때 여러 파일을 한꺼번에 복사할 수도 있다. 
  ``` sh
  $ cp [옵션] <복사할 파일> <복사할 파일> ... <복사할 위치>
  ```
* `cp` 명령어로 복사할 때 이미 같은 이름의 파일이 있으면 덮어쓴다.
* `-i` 옵션을 사용하면 덮어써도 되는지 진행 여부를 확인한다.
  ``` sh
  $ cp -i hello.txt copy.txt
  ```
* `cp` 명령어를 사용해서 디렉터리도 복사할 수 있는데 디렉터리를 복사하는 옵션인 `-r`을 지정해야 한다.
  ``` sh
  # 디렉터리에 존재하는 파일, 디렉터리 모두 복사됨
  $ cp -r dir1 dir2
  ```
### 5. 파일/디렉터리 이동
* 파일이나 디렉터리를 다른 디렉터리로 이동시키려면 `mv` 명령어를 사용한다.
* 디렉터리 안으로 파일을 이동할 때 여러 파일을 한꺼번에 이동할 수도 있다. 
* `mv` 명령어도 `cp` 명령어와 비슷하게 이동할 위치에 따라 다르게 동작한다.
  ```sh
  $ mv [옵션] <이동할 파일> <이동할 파일> ... <이동할 위치>
  ```
* `mv` 명령어로 이동할 때 이미 같은 이름의 파일이 있으면 덮어쓴다.
* `-i` 옵션을 사용하면 덮어써도 되는지 진행 여부를 확인한다.
  ``` sh
  $ mv -i hello.txt copy.txt
  ```
### 6. 링크
* 리눅스 파일 시스템에서는 파일에 별명을 붙이는 것을 링크라고 부른다. (윈도의 바로 가기와 비슷)
* 링크에는 하드 링크와 심볼릭 링크 두 종류가 있는데 보통 심볼릭 링크가 많이 사용된다.
  * 하드 링크란 한 파일 원본에 이름을 여러 개 붙이는 기능이다.
  * 심볼릭 링크란 원본 파일에 대한 정보가 담긴 작은 특수 파일이며 하드 링크와 달리 원본과 구별된다.
* 링크 파일을 생성하려면 `ln` 명령어를 사용하고 `-s` 옵션을 붙이면 심볼릭 링크가 만들어진다.
  ``` sh
  $ ln [옵션] <링크할 파일> <링크 이름>
  ```
### 7. 파일 검색
* 특정 디렉터리 안에서 파일을 검색하려면 `find` 명령어를 사용한다.
* `find` 명령어는 지정한 디렉터리 트리를 내려가면서 검색 조건에 일치하는 파일을 검색한다.
* 액션을 생략하면 기본적으로 검색 조건을 만족하는 파일의 경로를 출력한다.
  ```sh
  $ find <검색할 디렉터리> <검색 조건> <액션>
  ```
* 파일을 이름으로 검색하려면 검색 조건에 `-name` 또는 `-iname`으로 이름을 지정해야 한다.
  ```sh
  # 대소문자를 구분
  $ find . -name hello.txt -print

  # 대소문자를 구분하지 않음
  $ find . -iname hello.txt -print
  ```
* 파일 형식으로 검색하려면 검색 조건에 `-type`으로 파일 형식을 지정해야 한다.
  ```sh
  # 일반 파일
  $ find . -type f -print

  # 디렉터리
  $ find . -type d -print

  # 심볼릭 링크
  $ find . -type l -print
  ```
* 검색 조건을 여러 개 지정하려면 `-a(and)`를 사용하여 검색 조건을 지정해야 한다.
  ```sh
  $ find . -type f -a -name hello.txt -print

  # -a 생략 가능
  $ find . -type f -name hello.txt -print
  ```
## Vim
### 1. Vim
* 윈도에 메모장 맥의 텍스트 편집기와 같은 편집기로 대부분의 리눅스 배포판에 기본으로 설치되어 있는 편집기이다.
### 2. 실행과 종료
* Vim을 실행하려면 vim 명령어를 사용한다.
* Vim을 실행할 때 파일 이름을 지정하면 해당 파일을 열 수 있다.
* 이때 존재하지 않는 파일을 지정하면 해당 이름으로 파일이 새로 만들어진다.
  ```sh
  vim <파일명>
  ```
* Vim을 종료하려면 Vim이 실행된 상태에서 `:q`를 입력하고 엔터를 누른다.
### 3. Vim의 모드
* Vim은 다른 에디터와 달리 모드(Mode)라는 것이 존재한다.
* Vim은 명령어를 입력할 수 있는 보통 모드(Normal Mode)와 텍스트를 입력할 수 있는 입력 모드(Insert Mode)가 있다.
* Vim을 실행하면 보통 모드에서 시작하고 `i, a, o`를 누르면 입력 모드가 되고 입력 모드에서 `esc`를 누르면 보통 모드가 된다.
### 4. Vim 명령어
#### 4.1. 파일 저장
* 편집 중인 파일을 저장하려면 보통 모드에서 `:w` 명령어를 사용한다.
  * 기존 파일을 열은 상태라면 덮어쓰게 되고, 새로운 파일 편집 중이라면 새로운 파일이 만들어진다.
#### 4.2. 커서 이동
* 단어 단위로 커서를 이동하려면 보통 모드에서 `w, b` 명령어를 사용한다.
  * `w`는 다음 단어의 첫 글자로 이동
  * `b`는 이전 단어의 첫 글자로 이동
  * 공백을 기준으로 커서를 이동하고 싶을 때는 `W, B` 명령어를 사용한다.
* 행의 처음과 끝으로 커서를 이동하려면 보통 모드에서 `0, $` 명령어를 사용한다.
* 행 번호로 커서를 이동하려면 보통 모드에서 `<행 번호>G` 명령어를 사용한다.
* 파일의 처음으로 커서를 이동하려면 `gg`, 파일의 마지막으로 커서를 이동하려면 `G` 명령어를 사용한다.
#### 4.3. 자르기(삭제)
* 문자 하나를 자르려면 보통 모드에서 `x` 명령어를 사용한다.
* 문자의 범위를 지정해서 자르려면 `d` 명령어로 범위를 지정해서 문자를 삭제할 수 있다.
  * `d$`는 현재 커서 위치에서 행의 마지막까지 잘라낸다.
  * `d0`는 현재 커서 위치에서 행의 시작까지 잘라낸다.
  * `dl`은 문자 한 개를 잘라낸다.  
  * `dw`는 단어 한 개를 잘라낸다.
  * `dgg`는 현재 커서 위치의 행에서 문서 시작까지 잘라낸다
  * `dG`는 현재 커서 위치의 행에서 문서 끝까지 잘라낸다.
* 전체 행을 자르려면 보통 모드에서 `dd` 명령어를 사용한다.
#### 4.4. 복사
* 문자의 범위를 지정해서 복사하려면 `y` 명령어로 범위를 지정해서 문자를 복사할 수 있다.
  * `y$`는 현재 커서 위치에서 행의 마지막까지 복사한다.
  * `y0`는 현재 커서 위치에서 행의 시작까지 복사한다.
  * `yl`은 문자 한 개를 복사한다.  
  * `yw`는 단어 한 개를 복사한다.
  * `ygg`는 현재 커서 위치의 행에서 문서 시작까지 복사한다
  * `yG`는 현재 커서 위치의 행에서 문서 끝까지 복사한다.
* 전체 행을 복사하려면 보통 모드에서 `yy` 명령어를 사용한다.
#### 4.5. 붙여넣기
* 삭제(자르기), 복사한 텍스트는 보통 모드에서 `p` 명령어로 원하는 곳에 붙여 넣을 수 있다.
#### 4.6. 취소와 재실행
* 보통 모드에서 `u` 명령어를 입력하면 방금 실행한 동작을 취소할 수 있다.
* 취소한 동작에 대해 다시 실행하고 싶은 경우에는 보통 모드에서 `Ctrl + r` 명령어를 입력한다.
#### 4.7. 검색
* Vim은 파일에서 문자열을 검색할 수 있다.
  * `/문자열`은 문자열을 아래 방향으로 검색
  * `?문자열`은 문자열을 위 방향으로 검색
  * `n`은 검색 결과가 여러 개라면 다음 검색 결과로 이동
  * `N`은 검색 결과가 여러 개라면 이전 검색 결과로 이동
## 텍스트 처리
### 1. 텍스트 처리
* 리눅스에서는 애플리케이션의 데이터나 시스템의 설정 항목이 대부분 텍스트로 되어 있다.
* 따라서 리눅스에는 텍스트를 효과적으로 다루는 명령어가 다수 존재한다.
### 2. 바이트 수, 단어 수, 행의 수 세기
* 바이트 수, 단어 수, 행의 수를 출력하려면 `wc` 명령어를 사용한다.
  ```sh
  # 행의 수, 단어 수, 바이트 수를 출력
  $ wc <파일 이름>

  # 행의 수만 출력
  $ wc -l <파일 이름>

  # 단어 수만 출력
  $ wc -w <파일 이름>

  # 바이트 수만 출력
  $ wc -c <파일 이름>
  ```
### 3. 행 단위로 정렬
* 행 단위로 정렬하여 출력하려면 `sort` 명령어를 사용한다.
  ```sh
  $ sort <파일 이름>

  # 숫자 값으로 정렬
  $ sort -n <파일 이름>

  # 역순으로 정렬
  $ sort -r <파일 이름>

  # 숫자 값이 큰 순으로 정렬
  $ sort -nr <파일 이름>
  ```
### 4. 중복 제거
* 연속된 중복 데이터를 하나만 출력하려면 `uniq` 명령어를 사용한다.
  ```sh
  # 중복된 데이터를 제거
  $ uniq <파일 이름>

  # 중복된 행의 개수 출력
  $ uniq -c <파일 이름>
  ```
### 5. 일부 추출
* 입력의 일부를 추출하여 출력하려면 `cut` 명령어를 사용한다.
  ```sh
  $ cut -d <구분자> -f <필드 번호> [<파일 이름>]
  ```
### 6. 문자 치환
* 문자를 치환하려면 `tr` 명령어를 사용한다.
  ```sh
  $ tr <치환 전 문자> <치환 후 문자>
  ```
### 7. 파일의 마지막 부분 출력
* 파일의 마지막 내용부터 출력하려면 `tail` 명령어를 사용한다.
  ```sh
  # 파일의 마지막 10개 행을 출력
  tail <파일 이름>

  # 파일의 마지막 5개 행을 출력
  tail -n 5  <파일 이름>
  ```
* `tail` 명령어에 `-f` 옵션을 사용하면 파일의 내용이 추가될 때마다 실시간으로 내용을 출력하여 파일을 모니터링할 수 있다.
  ```sh
  tail -f <파일 이름>
  ```
* tail의 반대로 동작하는 명령어가 `head` 명령어이다.
  ```sh
  # 파일의 처음 10개 행을 출력
  head <파일 이름>

  # 파일의 처음 5개 행을 출력
  head -n 5  <파일 이름>
  ```
### 8. 파일에서 문자열 검색
* 파일에서 문자열을 검색하려면 `grep` 명령어를 사용한다.
  ```
  grep alias .bashrc
  ```
## 계정 관리
### 1. 계정 정보 확인
* 계정에 대한 정보는 `/etc/passwd` 파일에 저장되어 있다.
* `/etc/passwd` 파일의 구성 내용은 앞에서부터 사용자 ID, 암호, UID, GID, 설명, 홈 디렉터리, 로그인 쉘로 구성된다.
* 계정에 대한 패스워드는 `/etc/shadow` 파일에 저장되어 있다. (관리자 계정으로만 확인 가능)
### 2. 계정 생성
* 계정을 생성하려면 `adduser` 명령어를 사용한다.
  ```
  sudo adduser test
  ```
### 3. 계정 삭제
* 계정을 삭제하려면 `userdel` 명령어를 사용한다.
  ```
  sudo userdel test
  ```
## 파일 접근 권한
### 1. 접근 권한
* 리눅스는 여러 사용자가 동시에 접속하여 사용하기 때문에 파일들에 대해 접근 권한을 부여할 수 있다.
* 리눅스 파일에 대한 접근 권한의 종류에는 읽기(r), 쓰기(w), 실행(x) 권한이 있다.
* 접근 권한은 세 문자씩 묶어 한 세트로 구성되며 각 묶음 순서대로 소유자, 소유 그룹, 기타 사용자로 분류된다.
  ```
  ls -l
  -rw-r--r-- 1 root root    6 Sep  8 20:34 test.txt
  ```
### 2. 접근 권한 변경
* 파일에 대한 접근 권한을 변경하려면 `chmod` 명령어를 사용한다. 
  ```
  # 기호를 이용한 권한 변경
  chmod u-w test.txt
  ls -l
  -r--r--r-- 1 root root    6 Sep  8 20:34 test.txt

  chmod g+w test.txt
  ls -l
  -r--rw-r-- 1 root root    6 Sep  8 20:34 test.txt

  # 숫자를 이용한 권한 변경
  chmod 555 test.txt
  ls -l
  -r-xr-xr-x 1 root root    6 Sep  8 20:34 test.txt
  ```
